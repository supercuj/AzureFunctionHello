# Initially generated by dev.azure.com reading the solution manifest.  JAR
# --Only had to change the "trigger" directive from main to master.  JAR 
# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '79bd0781-f4bf-4b8c-9099-ab025dadd908'

  # Function app name
  functionAppName: 'AzureFunctionHello1964'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunctionHello'

stages:
- stage: Build
  displayName: Build FunctionApp and SQL Project stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build Function App'
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
  
- stage: BuildDACPAC
  jobs:
  - job: BuildDacpac
    pool:
      vmImage: 'windows-2019'
    steps:
     - task: DotNetCoreCLI@2
       displayName: 'Restore project dependencies'
       inputs:
        command: 'restore'
        projects: '**/*.csproj'

     - task: VSBuild@1
       displayName: 'Build the database project'
       inputs:
         project: '**/*.sqlproj'

     - task: CopyFiles@2
       displayName: 'Copy dacpac file to staging directory'
       inputs:
         contents: |
           AzureFunctionHelloDB/bin/**/*.dacpac
         targetFolder: '$(Build.StagingDirectory)'

     - task: PublishBuildArtifacts@1
       displayName: 'Publish DACPAC Artifact'
       inputs:
         pathToPublish: '$(Build.ArtifactStagingDirectory)'
         artifactName: dropDacpac
       condition: succeededOrFailed()

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)
    variables:
    - group: 'Release'

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

          - task: SqlAzureDacpacDeployment@1
            displayName: 'Execute Azure SQL : DacpacTask for AzureFunctionHelloDB'
            inputs:
              azureSubscription: '$(azureSubscription)'
              ServerName: '$(SQLServerName)'
              DatabaseName: '$(SQLDatabaseName)'
              SqlUsername: '$(SqlUsername)'
              SqlPassword: '$(SqlPassword)'
              DacpacFile: '$(Pipeline.Workspace)/dropDacpac/AzureFunctionHelloDB/bin/Debug/AzureFunctionHelloDB.dacpac'
